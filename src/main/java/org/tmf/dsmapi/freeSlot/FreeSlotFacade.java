package org.tmf.dsmapi.freeSlot;

import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.tmf.dsmapi.commons.facade.AbstractFacade;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.tmf.dsmapi.commons.exceptions.BadUsageException;
import org.tmf.dsmapi.commons.exceptions.ExceptionType;
import org.tmf.dsmapi.commons.exceptions.UnknownResourceException;
import org.tmf.dsmapi.commons.utils.BeanUtils;
import org.tmf.dsmapi.appointment.model.FreeSlot;
import org.tmf.dsmapi.freeSlot.event.FreeSlotEventPublisherLocal;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.persistence.Query;
import org.eclipse.persistence.jpa.JpaHelper;
import org.eclipse.persistence.queries.QueryByExamplePolicy;
import org.eclipse.persistence.queries.ReadAllQuery;
import org.eclipse.persistence.queries.ReadObjectQuery;
import static org.eclipse.persistence.sessions.SessionProfiler.QueryPreparation;
import org.tmf.dsmapi.appointment.model.AddressRef;
import org.tmf.dsmapi.appointment.model.RelatedObject;
import org.tmf.dsmapi.appointment.model.RelatedPartyRef;
import org.tmf.dsmapi.appointment.model.Schedule;
import org.tmf.dsmapi.commons.utils.FreeSlotFactory;
import org.tmf.dsmapi.service.qualification.template.QueryPreparation;

@Stateless
public class FreeSlotFacade extends AbstractFacade<FreeSlot> {

    @PersistenceContext(unitName = "DSAppointmentPU")
    private EntityManager em;
    @EJB
    FreeSlotEventPublisherLocal publisher;
//    StateModelImpl stateModel = new StateModelImpl();

    public FreeSlotFacade() {
        super(FreeSlot.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public void checkCreation(FreeSlot entity) throws BadUsageException, UnknownResourceException {

        FreeSlot sc = null;
        if (entity.getId() == null
                || entity.getId().isEmpty()) {
//            throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC, "While creating FreeSlot, id must be not null");
            //Do nothing create ok
            Logger.getLogger(FreeSlotFacade.class.getName()).log(Level.INFO, "FreeSlot with autogenerated id is being posted");
        } else {
            try {
                sc = this.find(entity.getId());
                if (null != sc) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_GENERIC,
                            "Duplicate Exception, FreeSlot with same id :" + entity.getId() + " alreay exists");
                }
            } catch (UnknownResourceException ex) {
                //Do nothing create ok
                Logger.getLogger(FreeSlotFacade.class.getName()).log(Level.INFO, "FreeSlot with id = " + entity.getId() + " is being posted", ex);
            }
        }

        //verify first status
        /**
         * if (null == entity.getLifecycleState()) {
         * entity.setLifecycleState(LifecycleStateValues.PENDING); throw new
         * BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS,
         * "LifecycleState is mandatory"); } else { if
         * (!entity.getLifecycleState().name().equalsIgnoreCase(LifecycleStateValues.PENDING.name()))
         * { throw new
         * BadUsageException(ExceptionType.BAD_USAGE_FLOW_TRANSITION,
         * "lifecycleState " + entity.getLifecycleState().value() + " is not the
         * first state, attempt : " + LifecycleStateValues.PENDING.value()); } }
         */
    }

    public FreeSlot patchAttributs(String id, FreeSlot partialEntity) throws UnknownResourceException, BadUsageException {
        FreeSlot currentEntity = this.find(id);

        if (currentEntity == null) {
            throw new UnknownResourceException(ExceptionType.UNKNOWN_RESOURCE);
        }

        verifyStatus(currentEntity, partialEntity);

        ObjectMapper mapper = new ObjectMapper();
        JsonNode node = mapper.convertValue(partialEntity, JsonNode.class);
        partialEntity.setId(id);
        if (BeanUtils.patch(currentEntity, partialEntity, node)) {
            publisher.valueChangedNotification(currentEntity, new Date());
        }

        return currentEntity;
    }

    public void verifyStatus(FreeSlot currentEntity, FreeSlot partialEntity) throws BadUsageException {
        /**
         * if (null != partialEntity.getLifecycleState()) {
         * stateModel.checkTransition(currentEntity.getLifecycleState(),
         * partialEntity.getLifecycleState());
         * publisher.statusChangedNotification(currentEntity, new Date()); }
         */
    }

    public FreeSlot checkFreeSlot(Schedule schedule) throws BadUsageException {
        FreeSlot slot = new FreeSlot();
        if (null == schedule.getMarketSegment()
                || schedule.getMarketSegment().isEmpty()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "marketSegment is mandatory");
        }

        if (null == schedule.getProductSpecification()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "productSpecification is mandatory");
        }

        if (null == schedule.getWeekNumber()
                || schedule.getWeekNumber().isEmpty()) {
            if (null == schedule.getStartDate() && null == schedule.getEndDate()) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "startDate and endDate must be filled if weekNumber is empty");
            }
            if (null == schedule.getStartDate()) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "startDate is mandatory when weekNumber is empty");
            } else {
                if (null == schedule.getEndDate()) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "endDate must be filled if startDate is filled");
                }else {
                    if (schedule.getStartDate().after(schedule.getEndDate())) {
                        throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "endDate must be later than startDate");
                    }
                }
            }
        }
        if (null == schedule.getStartDate() && null == schedule.getEndDate()) {
            if (null == schedule.getWeekNumber()
                    || schedule.getWeekNumber().isEmpty()) {
                throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "weekNumber is mandatory if startDate and endDate are empty");
            }
        }
        if (null == schedule.getRelatedParty()
                || schedule.getRelatedParty().isEmpty()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "RelatedParty is mandatory");
        } else {
            for (RelatedPartyRef rpf : schedule.getRelatedParty()) {
                if (null == rpf.getId() && null == rpf.getHref()) {
                    throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "relatedParty id or href is mandatory");
                }
            }
        }
        if (null == schedule.getAddress()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "Address is mandatory");
        }

        if (null == schedule.getCategory()) {
            throw new BadUsageException(ExceptionType.BAD_USAGE_MANDATORY_FIELDS, "Category is mandatory");
        }

        //bouchon
        slot.setRelatedParty(schedule.getRelatedParty());
        slot.setEndDate(schedule.getEndDate());
        slot.setStartDate(schedule.getStartDate());
        return slot;

    }
    
    public List<FreeSlot> findByCriteria(FreeSlot slot) throws BadUsageException {
        QueryByExamplePolicy policy = new QueryByExamplePolicy();
        policy.excludeDefaultPrimitiveValues();
        ReadAllQuery q = new ReadAllQuery(slot, policy);
        Query query = JpaHelper.createQuery(q, em);

        List<FreeSlot> retList = (List<FreeSlot>)query.getResultList();
        
        return retList;
    }

}